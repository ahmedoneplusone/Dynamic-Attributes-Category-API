// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace Dynamic.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20230312113549_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Models.Attribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Attribute");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Screen Size",
                            TypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Weight",
                            TypeId = 2
                        });
                });

            modelBuilder.Entity("Entities.Models.AttributeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("AttributeType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "System.String"
                        },
                        new
                        {
                            Id = 2,
                            Type = "System.Int32"
                        },
                        new
                        {
                            Id = 3,
                            Type = "System.DateTime"
                        },
                        new
                        {
                            Id = 4,
                            Type = "System.Byte"
                        });
                });

            modelBuilder.Entity("Entities.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            Name = "T.Vs",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Phones",
                            ParentCategoryId = 1
                        });
                });

            modelBuilder.Entity("Entities.Models.CategoryAttributes", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("AttributeId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId", "AttributeId");

                    b.HasIndex("AttributeId");

                    b.ToTable("CategoryAttributes");

                    b.HasData(
                        new
                        {
                            CategoryId = 2,
                            AttributeId = 1,
                            Value = "\"55.5\\\"\""
                        },
                        new
                        {
                            CategoryId = 2,
                            AttributeId = 2,
                            Value = "10"
                        },
                        new
                        {
                            CategoryId = 3,
                            AttributeId = 1,
                            Value = "\"6.7\\\"\""
                        },
                        new
                        {
                            CategoryId = 3,
                            AttributeId = 2,
                            Value = "1"
                        });
                });

            modelBuilder.Entity("Entities.Models.CategoryProduct", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("CategoryId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("CategoryProducts");

                    b.HasData(
                        new
                        {
                            CategoryId = 2,
                            ProductId = 1
                        },
                        new
                        {
                            CategoryId = 3,
                            ProductId = 2
                        });
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sony 55 inch OLED",
                            Price = 16788f,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 2,
                            Name = "Iphone 14 PRO",
                            Price = 45500f,
                            Quantity = 20
                        });
                });

            modelBuilder.Entity("Entities.Models.Attribute", b =>
                {
                    b.HasOne("Entities.Models.AttributeType", "AttributeType")
                        .WithMany("Attributes")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeType");
                });

            modelBuilder.Entity("Entities.Models.Category", b =>
                {
                    b.HasOne("Entities.Models.Category", "ParentCategory")
                        .WithMany("ChildrenCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Entities.Models.CategoryAttributes", b =>
                {
                    b.HasOne("Entities.Models.Attribute", "Attribute")
                        .WithMany("categoryAttributes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Category", "Category")
                        .WithMany("CategoryAttributes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entities.Models.CategoryProduct", b =>
                {
                    b.HasOne("Entities.Models.Category", "Category")
                        .WithMany("CategoryProducts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Product", "Product")
                        .WithMany("CategoryProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.Models.Attribute", b =>
                {
                    b.Navigation("categoryAttributes");
                });

            modelBuilder.Entity("Entities.Models.AttributeType", b =>
                {
                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("Entities.Models.Category", b =>
                {
                    b.Navigation("CategoryAttributes");

                    b.Navigation("CategoryProducts");

                    b.Navigation("ChildrenCategories");
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.Navigation("CategoryProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
